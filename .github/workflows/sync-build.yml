name: Sync Upstream and Build Release
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      needs_update: ${{ steps.check-version.outputs.needs_update }}
      BRIDGE_VER: ${{ steps.check-version.outputs.BRIDGE_VER }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true
      - name: check for new upstream version
        id: check-version
        run: |
          git fetch --tags
          UPSTREAM_VER=$(curl -s https://api.github.com/repos/ProtonMail/proton-bridge/releases/latest | jq -r '.tag_name')

          # check if new version is available and new version starts with a digit
          NEEDS_UPDATE=true

          # write output so next steps can use it to skip if no new version
          echo "BRIDGE_VER=$UPSTREAM_VER" >> $GITHUB_ENV
          echo "BRIDGE_VER=$UPSTREAM_VER" >> $GITHUB_OUTPUT
          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT

  build-linux:
    timeout-minutes: 180
    needs: [sync-upstream]
    if: needs.sync-upstream.outputs.needs_update == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-22.04-arm
    env:
      BRIDGE_VER: ${{ needs.sync-upstream.outputs.BRIDGE_VER }}
    outputs:
      artifact-id: ${{ steps.artifact-upload.outputs.artifact-id }}
      commit-id: ${{ steps.commit-update.outputs.commit-id }}
    steps:
      - name : Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup git bot
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
  
      - name: Update proton-bridge submodule to new version tag
        run: |
          echo "Proton-Bridge Version requested: $BRIDGE_VER"
          cd proton-bridge
          git fetch --tags
          git checkout $BRIDGE_VER
          cd ..
          git add proton-bridge

      - name: Install Python and cache dependencies
        uses: actions/setup-python@v5

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Go and enable caching
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.9'
          cache: true

      - name: Install ARM Qt^ 6.8.2
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          version: 6.8.2
          host: linux_arm64
          arch: linux_gcc_arm64
          modules: 'qtmultimedia qtpositioning qtwebchannel qtwebengine qtwebview'

      - name: Install build dependencies
        run: |
          sudo apt update && sudo apt-get install -y \
            ninja-build \
            libglvnd-dev \
            libsecret-1-dev \
            pkg-config

      - name: Install Ruby and fpm for packaging
        run: |
          sudo apt-get install -y ruby-full
          wget https://rubygems.org/rubygems/rubygems-3.4.8.tgz
          tar xvzf rubygems-3.4.8.tgz
          cd rubygems-3.4.8
          sudo ruby setup.rb
          sudo gem install dotenv fpm
    

      - name: Apply patches to upstream source
        run: |
          for patch in $(ls patches/*.patch | sort); do
            echo "Applying patch $patch"
            patch -p1 < $patch
          done

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Export VCPKG environment variables
        run: |
          echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> "$GITHUB_ENV"
          echo "VCPKG_FORCE_SYSTEM_BINARIES=1" >> "$GITHUB_ENV"
  
      - name: Run Build
        run: |
          cd proton-bridge
          make build

      - name: Rename/Repack Build Artifact
        run: |
          # pack into protonmail-bridge folder and repack as tar.gz
          mkdir -p protonmail
          tar -xzf proton-bridge/bridge*.tgz -C protonmail
          tar -czf protonmail-bridge-linux-arm64.tar.gz protonmail

          mkdir -p output
          mv protonmail-bridge-linux-arm64.tar.gz output/

      - name: Setup FPM environment
        env: 
          BRIDGE_VER: ${{ needs.sync-upstream.outputs.BRIDGE_VER }}
        run: | 
          mkdir -p packaging
          tar -xzf proton-bridge/bridge*.tgz -C packaging

          TAG_VER=$(echo $BRIDGE_VER | sed 's/v//')
          
          # after install script for deb/rpm 
          cat >> after-install.sh <<EOF
          #!/bin/sh
          # link the executable to /usr/bin
          ln -sF /usr/lib/protonmail/bridge/proton-bridge /usr/bin/protonmail-bridge
          # update the desktop database and icon cache if gnome is installed
          if [ -x /usr/bin/update-desktop-database ]; then
            /usr/bin/update-desktop-database
          fi
          if [ -x /usr/bin/update-icon-caches ]; then
            /usr/bin/update-icon-caches /usr/share/icons/hicolor
          fi
          EOF

          # write shared fpm config
          cat > .fpm <<EOF
          -s dir
          -n protonmail-bridge
          -v $TAG_VER
          --verbose
          --force
          --chdir ${{ github.workspace }}/packaging
          --architecture aarch64
          --provides protonmail-bridge
          --description "Proton Mail Bridge is a desktop application that runs in the background encrypting and decrypting messages as they enter and leave your computer."
          --license "GPLv3"
          --maintainer "Proton AG (Proton Mail Bridge developers) <bridge@protonmail.ch> packed by ArchitektApx"
          --vendor "Proton AG"
          --url "https://proton.me/mail/bridge"
          --after-install ${{ github.workspace }}/after-install.sh
          proton-bridge.desktop=/usr/share/applications/protonmail-bridge.desktop logo.svg=/usr/share/icons/hicolor/scalable/apps/protonmail-bridge.svg Changelog.md=/usr/share/doc/protonmail/bridge/Changelog.md LICENSE=/usr/share/doc/protonmail/bridge/LICENSE .=/usr/lib/protonmail/bridge
          EOF

      - name: Package RPM
        run: |
          RPM_DEPENDS="dejavu-sans-fonts, fontconfig, glib2, glibc, libEGL, libgcc, libglvnd-glx, libsecret, libstdc++, libxkbcommon-x11"
          fpm -t rpm --rpm-tag '%define _build_id_links none' --rpm-tag '%undefine _missing_build_ids_terminate_build' --depends "$RPM_DEPENDS" --rpm-summary "Proton Mail Bridge"
          mv *.rpm output/
    
      - name: Package Deb
        run: |
          DEB_DEPENDS="libegl1, libc6, libsecret-1-0, libglib2.0-0, libstdc++6, libgcc1, libpulse-mainloop-glib0, fonts-dejavu"
          DEB_SUGGESTS="gnome-keyring, pass"
          fpm -t deb --depends "$DEB_DEPENDS" --deb-suggests "$DEB_SUGGESTS"
          mv *.deb output/
      
      - name: Make sha256sums textfile and tar everything together
        run: |
          cd output/  
          sha256sum *.rpm *.deb > sha256sums.txt
          cd .. 
          tar -czf protonmail-build-artifacts.tar.gz output/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        id: artifact-upload
        with:
          path: protonmail-build-artifacts.tar.gz
          name: protonmail-build-artifacts.tar.gz

      - name: Update protonmail-bridge spec file
        run: | 
          # remove v from version tag
          SPEC_VER=$(echo $BRIDGE_VER | sed 's/v//')
          # update spec file version and url
          sed -i '0,/Version:.*/s//Version:            '$SPEC_VER'/' protonmail-bridge.spec
          sed -i 's@releases/download/.*@releases/download/'$BRIDGE_VER'/protonmail-bridge-linux-arm64.tar.gz@g' protonmail-bridge.spec
  
          # get upstream changelog from latest release
          CHANGELOG="$(curl -s https://api.github.com/repos/ProtonMail/proton-bridge/releases/latest | jq -r '.body')"
          # format changelog to rpm format
          CHANGELOG="$(echo "$CHANGELOG" | sed 's/\*/-/g' | sed 's/###/-/g' | sed '/^$/d')"

          # get current changelog from spec file (everything after %changelog)
          OLD_CHANGELOG="$(sed -n '/%changelog/,$p' protonmail-bridge.spec | sed '1d')"

          # create new changelog line with current date and commit message
          NEW_CHANGELOG="$(echo -e "* $(date +'%a %b %d %Y') ArchitektApx <architektapx@gehinors.ch> - $SPEC_VER\n$CHANGELOG\n\n$OLD_CHANGELOG")"

          # replace old changelog with new one
          sed -i '/%changelog/,$d' protonmail-bridge.spec
          echo -e "%changelog\n$NEW_CHANGELOG" >> protonmail-bridge.spec
          git add protonmail-bridge.spec

      - name: commit and tag new version
        id: commit-update
        run: |
          git commit -m "chore(zen-browser): Sync/Rebuild Proton-Bridge to $BRIDGE_VER"
          git tag $BRIDGE_VER
          git push 
          git push --tags

          # get commit sha for later use
          echo "commit-id=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  release:
    needs: [sync-upstream, build-linux]
    permissions:
      contents: write
    if: needs.sync-upstream.outputs.needs_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: protonmail-build-artifacts.tar.gz

      - name: Unpack Artifact
        run: |
          tar -xzf protonmail-build-artifacts.tar.gz

      - name: Setup Release
        id: setup-release
        run: |
          # get upstream body and write to markdown file
          UPSTREAM_JSON=$(curl -s https://api.github.com/repos/ProtonMail/proton-bridge/releases/latest)
          echo $UPSTREAM_JSON | jq -r '.body' > release-notes.md
          UPSTREAM_NAME=$(echo $UPSTREAM_JSON | jq -r '.name')
          echo "RELEASE_NAME=$UPSTREAM_NAME" >> $GITHUB_OUTPUT

      - name: Publish Release
        uses: ncipollo/release-action@v1.14.0
        with: 
          artifacts: output/*
          tag: ${{ needs.sync-upstream.outputs.BRIDGE_VER }}
          commit: ${{ needs.build-linux.outputs.commit-id }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: ${{ github.workspace }}/release-notes.md
          makeLatest: true
          name: ${{ steps.setup-release.outputs.RELEASE_NAME }}
          skipIfReleaseExists: true
